def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

Properties pro = new Properties()
pro.load(project.rootProject.file('local.properties').newDataInputStream())
print(pro.getProperty('keyAlias'))

android {
    compileSdkVersion 30

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    defaultConfig {
        applicationId "com.twt.service"
        multiDexEnabled true
        minSdkVersion 17
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        manifestPlaceholders = [
                GETUI_APPID     : "43HGFmIKsnAmjrjDLr60X4",
                GETUI_APP_KEY   : "lMfDbXITSXALHE5EtfZv6A",
                GETUI_APP_SECRET: "kyL4r0PNpG9xnSEUO1omn5",
                MASTERSECRET    : "WLVrpl4GFz7esi3AeyrYj"
        ]

        ndk {
            // 注意：这里需要添加项目所需 CPU 类型的最小集
            abiFilters "arm64-v8a", "x86", "armeabi-v7a"
        }
    }

    signingConfigs {
        release {
            storeFile file(pro.getProperty('jksPath'))
            storePassword pro.getProperty('storePassword')
            keyAlias pro.getProperty('keyAlias')
            keyPassword pro.getProperty('storePassword')
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
        }

        debug {
            signingConfig signingConfigs.release
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'com.getui:gtsdk:3.1.4.0'
    implementation 'com.getui:gtc:3.1.0.0'

    implementation(platform("com.squareup.okhttp3:okhttp-bom:4.9.0"))
    implementation("com.squareup.okhttp3:okhttp")
    implementation("com.squareup.okhttp3:logging-interceptor")

    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.3'

    def work_version = "2.5.0"
    implementation "androidx.work:work-runtime-ktx:$work_version"

    implementation "androidx.core:core-ktx:1.3.2"

    def lifecycle_version = "2.3.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"

    implementation "androidx.fragment:fragment-ktx:1.3.1"

//    implementation "com.jakewharton.timber:timber:4.7.1"
}
