def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.huawei.agconnect'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

Properties pro = new Properties()
pro.load(project.rootProject.file('local.properties').newDataInputStream())
print(pro.getProperty('keyAlias'))

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

android {
    compileSdkVersion 31

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    defaultConfig {
        applicationId "com.twt.service"
        multiDexEnabled true
        minSdkVersion 19
        targetSdkVersion 31
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        manifestPlaceholders = [
                HUAWEI_APP_ID   : "103402255",

                XIAOMI_APP_ID   : "2882303761517785783",
                XIAOMI_APP_KEY  : "5851778525783",

                MEIZU_APP_ID    : "146410",
                MEIZU_APP_KEY   : "77b312b3e3b9497bb25298911f7b14d7",

                VIVO_APP_ID     : "105266463",
                VIVO_APP_KEY    : "40e5b229553e31f1842b80915781e2e8",

                OPPO_APP_KEY   : "7cuaXvykA58gkOW4c4oGkG8o0",
                OPPO_APP_SECRET: "f7098A23C18d4B504deCB0caaF1d6064",

                // 移除 Gradle 中 GETUI_APP_KEY、GETUI_APP_SECRET、配置，GETUI_APP_ID 改为 GETUI_APPID, AndroidManifest 中仅保留 GETUI_APPID 占位符。
                // project
//                GETUI_APPID     : "43HGFmIKsnAmjrjDLr60X4",
//                GETUI_APP_KEY   : "lMfDbXITSXALHE5EtfZv6A",
//                GETUI_APP_SECRET: "kyL4r0PNpG9xnSEUO1omn5",
//                MASTERSECRET    : "WLVrpl4GFz7esi3AeyrYj"

                // develop
                GETUI_APPID     : "bj16oBtQ3VAvqPbGtEHB69",
                GETUI_APP_KEY   : "7Cce8U9u4B9nZ6MPQgrb33",
                GETUI_APP_SECRET: "4MHg2QpRfIAU2cj9nboct4",
                MASTERSECRET    : "4YJ5qkGgrl5sdnPCP5Axc2"
        ]

        ndk {
            // 注意：这里需要添加项目所需 CPU 类型的最小集
            abiFilters "arm64-v8a"
        }
    }

    signingConfigs {
        config {
            try {
                storeFile file(pro.getProperty('jksPath'))
                storePassword pro.getProperty('storePassword')
                keyAlias pro.getProperty('keyAlias')
                keyPassword pro.getProperty('storePassword')
            } catch (ex) {
                ex.printStackTrace()
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.config
//            minifyEnabled false   // 删除无用代码
//            shrinkResources false // 删除无用资源
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            shrinkResources true // 删除无用资源
        }

        debug {
            signingConfig signingConfigs.config
            minifyEnabled false//删除无用代码
            shrinkResources false//删除无用资源
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:multidex:1.0.3'

    implementation(platform("com.squareup.okhttp3:okhttp-bom:4.9.0"))
    implementation("com.squareup.okhttp3:okhttp")
    implementation("com.squareup.okhttp3:logging-interceptor")

    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.0'

    def work_version = "2.7.1"
    implementation "androidx.work:work-runtime-ktx:$work_version"

    implementation "androidx.core:core-ktx:1.7.0"

    def lifecycle_version = "2.4.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"

    implementation "androidx.fragment:fragment-ktx:1.4.0"

    implementation 'com.tencent.tauth:qqopensdk:3.52.0'
    implementation 'com.amap.api:location:5.4.0'

    implementation('io.github.lucksiege:pictureselector:v2.7.2') {
        configurations {
            compile.exclude module: 'ucrop'
        }
    }

    implementation 'com.getui:gtsdk:3.2.7.0'
    implementation 'com.getui:gtc:3.1.7.0'

    implementation 'com.getui.opt:hwp:3.1.0'
    implementation 'com.getui.opt:xmp:3.1.0'
    // TODO: 还没有配置
    // oppo集成有其他步骤
//    implementation 'com.assist-v3:oppo:3.1.0'
    implementation 'com.assist-v3:vivo:3.1.0'
    implementation 'com.getui.opt:mzp:3.2.0'

    implementation 'com.huawei.hms:push:6.1.0.300'

//    implementation 'com.tencent.mm.opensdk:wechat-sdk-android-without-mta:5.5.8'

//    implementation "com.jakewharton.timber:timber:4.7.1"
}
